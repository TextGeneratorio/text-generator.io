<!DOCTYPE html>
<html>

<head>
	<title>{{ title }}</title>
	<style>
		body {
			font-family: sans-serif;
		}

		.demo-ribbon {
			width: 100%;
			height: 40vh;
			background-color: #3F51B5;
			flex-shrink: 0;
		}

		.demo-main {
			margin-top: -35vh;
			flex-shrink: 0;
		}

		.demo-container {
			max-width: 1600px;
			width: calc(100% - 16px);
			margin: 0 auto;
		}

		.demo-content {
			border-radius: 2px;
			padding: 40px 56px;
			margin-bottom: 80px;
		}

		.tts-container {
			max-width: 600px;
			margin: 0 auto;
		}

		.tts-field {
			margin: 1rem 0;
		}

		.mdl-button {
			margin: 16px 0;
		}

		.demo-crumbs {
			margin-bottom: 20px;
		}

		.demo-crumbs a {
			color: #666;
			text-decoration: none;
		}

		.code-examples {
			display: none;
			margin-top: 20px;
			padding: 20px;
			background: #f5f5f5;
			border-radius: 4px;
		}

		pre {
			white-space: pre-wrap;
			word-wrap: break-word;
		}
	</style>
</head>

<body>
	<div class="demo-ribbon"></div>
	<main class="demo-main mdl-layout__content">
		<div class="demo-container mdl-grid">
			<div class="mdl-cell mdl-cell--2-col mdl-cell--hide-tablet mdl-cell--hide-phone"></div>
			<div
				class="demo-content mdl-color--white mdl-shadow--4dp content mdl-color-text--grey-800 mdl-cell mdl-cell--8-col">
				<div class="demo-crumbs mdl-color-text--grey-500">
					<a href="/" title="Text Generator">Text Generator</a> > Text-to-Speech Demo
				</div>

				<div class="tts-container">
					<h1>Custom Text-to-Speech Demo</h1>
					<p>Enter text, select voice, choose speed, and click "Generate Speech".</p>

					<div class="tts-field">
						<label for="textInput">Text to Synthesize:</label><br />
						<textarea id="textInput" rows="3" style="width:100%;" class="mdl-textfield__input"
							placeholder="Enter text here..." autofocus></textarea>
					</div>

					<div class="tts-field">
						<label for="voiceSelect">Voice:</label>
						<select id="voiceSelect" class="mdl-textfield__input">
							<option value="af_nicole" selected>af_nicole</option>
							<option value="af_bella">af_bella</option>
							<option value="af_sarah">af_sarah</option>
							<option value="am_adam">am_adam</option>
							<option value="am_michael">am_michael</option>
							<option value="bf_emma">bf_emma</option>
							<option value="bf_isabella">bf_isabella</option>
							<option value="bm_george">bm_george</option>
							<option value="bm_lewis">bm_lewis</option>
							<option value="af_sky">af_sky</option>
						</select>
					</div>

					<div class="tts-field">
						<label for="speed">Speed:</label>
						<input type="range" id="speed" min="0.5" max="2.0" step="0.1" value="1.0" />
						<span id="speedValue">1.0</span>
					</div>

					<button id="generateBtn"
						class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored">Generate Speech</button>
					<button id="showCodeBtn" class="mdl-button mdl-js-button mdl-button--raised">Show Code
						Examples</button>
					<br /><br />
					<audio id="audioPlayer" controls></audio>

					<div id="codeExamples" class="code-examples">
						<h3>Code Examples</h3>

						<h4>cURL</h4>
						<pre><code>curl -X POST "https://api.text-generator.io/api/v1/generate_speech" \
-H "Content-Type: application/json" \
-H "secret: YOUR_API_KEY" \
-d '{
  "text": "Hello world",
  "voice": "af_nicole",
  "speed": 1.0
}'</code></pre>

						<h4>JavaScript</h4>
						<pre><code>const response = await fetch('https://api.text-generator.io/api/v1/generate_speech', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'secret': 'YOUR_API_KEY'
  },
  body: JSON.stringify({
    text: 'Hello world',
    voice: 'af_nicole', 
    speed: 1.0
  })
});</code></pre>

						<h4>Python</h4>
						<pre><code>import requests
import json

url = "https://api.text-generator.io/api/v1/generate_speech"
headers = {
    "Content-Type": "application/json",
    "secret": "YOUR_API_KEY"
}
data = {
    "text": "Hello world",
    "voice": "af_nicole",
    "speed": 1.0
}

response = requests.post(url, headers=headers, json=data)</code></pre>
					</div>
				</div>
			</div>
		</div>
	</main>

	<script>
		const textEl = document.getElementById("textInput");
		const voiceEl = document.getElementById("voiceSelect");
		const speedEl = document.getElementById("speed");
		const speedValueEl = document.getElementById("speedValue");
		const generateBtn = document.getElementById("generateBtn");
		const audioPlayer = document.getElementById("audioPlayer");
		const showCodeBtn = document.getElementById("showCodeBtn");
		const codeExamples = document.getElementById("codeExamples");

		let secret = null;

		// Get secret from PostgreSQL authentication
		async function checkAuthAndGetSecret() {
			try {
				const response = await fetch('/api/current-user');
				if (response.ok) {
					const user = await response.json();
					secret = user.secret;
					// Update code examples with actual secret
					const codeBlocks = document.querySelectorAll('pre code');
					codeBlocks.forEach(block => {
						block.textContent = block.textContent.replace('YOUR_API_KEY', secret);
					});
				}
			} catch (error) {
				console.log('User not authenticated');
			}
		}
		
		// Get user secret on page load
		checkAuthAndGetSecret();
			});
		}

		speedEl.addEventListener("input", () => {
			speedValueEl.textContent = speedEl.value;
		});

		showCodeBtn.addEventListener("click", () => {
			codeExamples.style.display = codeExamples.style.display === "none" ? "block" : "none";
		});

		generateBtn.addEventListener("click", async () => {
			const text = textEl.value;
			const voice = voiceEl.value;
			const speed = speedEl.value;

			if (!text.trim()) {
				alert("Please enter some text");
				return;
			}

			try {
				const headers = {
					"Content-Type": "application/json"
				};

				if (secret) {
					headers["secret"] = secret;
				}
				else {
					alert("Please sign in to generate speech");
					return;
				}
				const baseAPIUrl = window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1')
					? 'http://localhost:9080'
					: 'https://api.text-generator.io';

				const response = await fetch(`${baseAPIUrl}/api/v1/generate_speech`, {
					method: "POST",
					headers: headers,
					body: JSON.stringify({ text, voice, speed: parseFloat(speed) }),
				});

				if (!response.ok) {
					alert("Failed to generate speech!");
					return;
				}

				const blob = await response.blob();
				const url = URL.createObjectURL(blob);
				audioPlayer.src = url;
				audioPlayer.play();
			} catch (err) {
				console.error(err);
				alert("Error fetching speech audio");
			}
		});
	</script>
</body>

</html>