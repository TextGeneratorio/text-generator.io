<!-- Image Captioning AI Tool -->
<div class="tool-container">
    <div class="tool-header">
        <h1>{{ tool_name }}</h1>
        <p class="tool-description">{{ tool_description }}</p>
    </div>

    <div class="tool-content">
        <!-- Image Upload Section -->
        <div class="upload-section">
            <div class="upload-area" id="upload-area">
                <div class="upload-icon">üì∑</div>
                <div class="upload-text">
                    <p>Drag & drop an image here or click to select</p>
                    <p class="upload-hint">Supports JPEG, PNG, WebP, GIF, BMP, TIFF up to 10MB</p>
                </div>
                <input type="file" id="image-input" accept="image/*" style="display: none;">
            </div>
            
            <div class="upload-options">
                <label class="checkbox-label">
                    <input type="checkbox" id="fast-mode" checked>
                    <span class="checkmark"></span>
                    Fast Mode (~200ms)
                </label>
                <span class="mode-info">Uncheck for Quality Mode (~500ms)</span>
            </div>
        </div>

        <!-- Image Preview Section -->
        <div class="preview-section" id="preview-section" style="display: none;">
            <div class="image-preview">
                <img id="preview-image" alt="Preview" />
                <div class="preview-actions">
                    <button id="process-btn" class="process-btn">Generate Caption</button>
                    <button id="clear-btn" class="clear-btn">Clear</button>
                </div>
            </div>
        </div>

        <!-- Results Section -->
        <div class="results-section" id="results-section" style="display: none;">
            <div class="result-card">
                <div class="result-header">
                    <h3>Generated Caption</h3>
                    <div class="result-meta">
                        <span id="model-info">microsoft/git-base</span>
                        <span id="processing-time"></span>
                    </div>
                </div>
                <div class="caption-result" id="caption-result"></div>
                <div class="result-actions">
                    <button id="copy-btn" class="copy-btn">Copy Caption</button>
                    <button id="new-image-btn" class="new-btn">Process Another Image</button>
                </div>
            </div>
        </div>

        <!-- Loading State -->
        <div class="loading-section" id="loading-section" style="display: none;">
            <div class="loading-spinner"></div>
            <p>Processing image...</p>
        </div>
    </div>

    <!-- API Examples Section -->
    <div class="api-examples">
        <h2>API Integration Examples</h2>
        
        <div class="example-tabs">
            <button class="tab-btn active" data-tab="javascript">JavaScript</button>
            <button class="tab-btn" data-tab="python">Python</button>
            <button class="tab-btn" data-tab="curl">cURL</button>
        </div>

        <div class="tab-content active" id="javascript-tab">
            <pre><code class="language-javascript">const formData = new FormData();
formData.append('image_file', fileInput.files[0]);
formData.append('fast_mode', true);

fetch('https://api.text-generator.io/api/v1/image-caption', {
    method: 'POST',
    headers: {
        'secret': '<span class="api-secret-value">Loading...</span>'
    },
    body: formData
})
.then(response => response.json())
.then(data => {
    console.log('Caption:', data.caption);
    console.log('Model:', data.model);
    console.log('Fast mode:', data.fast_mode);
});</code></pre>
        </div>

        <div class="tab-content" id="python-tab">
            <pre><code class="language-python">import requests

url = 'https://api.text-generator.io/api/v1/image-caption'
headers = {'secret': '<span class="api-secret-value">Loading...</span>'}
files = {'image_file': open('image.jpg', 'rb')}
data = {'fast_mode': True}

response = requests.post(url, headers=headers, files=files, data=data)
result = response.json()
print(f"Caption: {result['caption']}")</code></pre>
        </div>

        <div class="tab-content" id="curl-tab">
            <pre><code class="language-bash">curl -X POST "https://api.text-generator.io/api/v1/image-caption" \
  -H "secret: <span class="api-secret-value">Loading...</span>" \
  -F "image_file=@image.jpg" \
  -F "fast_mode=true"</code></pre>
        </div>

        <div class="example-response">
            <h3>Example Response</h3>
            <pre><code class="language-json">{
  "caption": "a red car parked on the street",
  "filename": "example.jpg",
  "fast_mode": true,
  "model": "microsoft/git-base"
}</code></pre>
        </div>
    </div>

    <!-- Features Section -->
    <div class="features-section">
        <h2>Features</h2>
        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">üéØ</div>
                <h3>High Accuracy</h3>
                <p>Uses Microsoft's GIT-base model for precise image understanding</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">‚ö°</div>
                <h3>Fast Processing</h3>
                <p>Fast mode processes images in ~200ms, Quality mode in ~500ms</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">üñºÔ∏è</div>
                <h3>Multiple Formats</h3>
                <p>Supports JPEG, PNG, WebP, GIF, BMP, TIFF up to 10MB</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">üöÄ</div>
                <h3>Optimized Performance</h3>
                <p>Mixed precision FP16, JIT compilation, and persistent caching</p>
            </div>
        </div>
    </div>
</div>

<style>
.tool-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.tool-header {
    text-align: center;
    margin-bottom: 30px;
}

.tool-description {
    font-size: 1.1em;
    color: #666;
    margin: 10px 0;
}

.upload-section {
    margin-bottom: 30px;
}

.upload-area {
    border: 2px dashed #ddd;
    border-radius: 8px;
    padding: 40px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.upload-area:hover {
    border-color: #007bff;
    background-color: #f8f9fa;
}

.upload-area.dragover {
    border-color: #007bff;
    background-color: #e3f2fd;
}

.upload-icon {
    font-size: 48px;
    margin-bottom: 20px;
}

.upload-text p {
    margin: 5px 0;
    font-size: 1.1em;
}

.upload-hint {
    color: #666;
    font-size: 0.9em;
}

.upload-options {
    margin-top: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

.checkbox-label {
    display: flex;
    align-items: center;
    cursor: pointer;
}

.preview-section {
    margin-bottom: 30px;
}

.image-preview {
    text-align: center;
}

.image-preview img {
    max-width: 100%;
    max-height: 400px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.preview-actions {
    margin-top: 20px;
    display: flex;
    gap: 10px;
    justify-content: center;
}

.process-btn {
    background: #007bff;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    font-size: 1.1em;
    cursor: pointer;
    transition: background 0.3s ease;
}

.process-btn:hover {
    background: #0056b3;
}

.clear-btn {
    background: #6c757d;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    cursor: pointer;
}

.results-section {
    margin-bottom: 30px;
}

.result-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    background: white;
}

.result-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.result-meta {
    font-size: 0.9em;
    color: #666;
}

.caption-result {
    font-size: 1.2em;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 6px;
    margin-bottom: 15px;
}

.result-actions {
    display: flex;
    gap: 10px;
}

.copy-btn, .new-btn {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.copy-btn {
    background: #28a745;
    color: white;
}

.new-btn {
    background: #007bff;
    color: white;
}

.loading-section {
    text-align: center;
    padding: 40px;
}

.loading-spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.api-examples {
    margin: 40px 0;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 8px;
}

.example-tabs {
    display: flex;
    margin-bottom: 20px;
    border-bottom: 1px solid #ddd;
}

.tab-btn {
    background: none;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-bottom: 2px solid transparent;
}

.tab-btn.active {
    border-bottom-color: #007bff;
    color: #007bff;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.features-section {
    margin: 40px 0;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.feature-card {
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    text-align: center;
}

.feature-icon {
    font-size: 2em;
    margin-bottom: 10px;
}

pre {
    background: #f4f4f4;
    padding: 15px;
    border-radius: 6px;
    overflow-x: auto;
}

.mode-info {
    font-size: 0.9em;
    color: #666;
}

.api-secret-value {
    background-color: #e7f3ff;
    padding: 2px 4px;
    border-radius: 3px;
    font-family: monospace;
    font-weight: bold;
    color: #0066cc;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const uploadArea = document.getElementById('upload-area');
    const imageInput = document.getElementById('image-input');
    const previewSection = document.getElementById('preview-section');
    const previewImage = document.getElementById('preview-image');
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const resultsSection = document.getElementById('results-section');
    const loadingSection = document.getElementById('loading-section');
    const captionResult = document.getElementById('caption-result');
    const copyBtn = document.getElementById('copy-btn');
    const newImageBtn = document.getElementById('new-image-btn');
    const fastModeCheckbox = document.getElementById('fast-mode');
    const processingTime = document.getElementById('processing-time');

    let currentFile = null;
    let userApiSecret = null;
    let secretLoaded = false;

    // Fetch user's API secret
    async function fetchUserApiSecret() {
        try {
            const response = await fetch('/api/current-user');
            if (response.ok) {
                const userData = await response.json();
                userApiSecret = userData.secret;
                
                // Update all API secret placeholders
                document.querySelectorAll('.api-secret-value').forEach(el => {
                    el.textContent = userApiSecret || 'Please login to get your API secret';
                });
            } else {
                document.querySelectorAll('.api-secret-value').forEach(el => {
                    el.textContent = 'Please login to get your API secret';
                });
            }
        } catch (error) {
            console.error('Error fetching user data:', error);
            document.querySelectorAll('.api-secret-value').forEach(el => {
                el.textContent = 'Please login to get your API secret';
            });
        } finally {
            secretLoaded = true;
        }
    }

    // Wait for secret to be loaded
    async function waitForSecret() {
        while (!secretLoaded) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        return userApiSecret;
    }

    // Load user API secret on page load
    fetchUserApiSecret();

    // Tab switching
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const tab = this.getAttribute('data-tab');
            
            // Remove active class from all tabs and contents
            document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            
            // Add active class to clicked tab and corresponding content
            this.classList.add('active');
            document.getElementById(tab + '-tab').classList.add('active');
        });
    });

    // Upload area click
    uploadArea.addEventListener('click', () => {
        imageInput.click();
    });

    // Drag and drop
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFile(files[0]);
        }
    });

    // File input change
    imageInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleFile(e.target.files[0]);
        }
    });

    // Handle file selection
    function handleFile(file) {
        if (!file.type.startsWith('image/')) {
            alert('Please select an image file');
            return;
        }

        if (file.size > 10 * 1024 * 1024) {
            alert('Image file too large. Maximum size is 10MB.');
            return;
        }

        currentFile = file;
        
        // Show preview
        const reader = new FileReader();
        reader.onload = (e) => {
            previewImage.src = e.target.result;
            previewSection.style.display = 'block';
            resultsSection.style.display = 'none';
        };
        reader.readAsDataURL(file);
    }

    // Process image
    processBtn.addEventListener('click', async () => {
        if (!currentFile) return;

        loadingSection.style.display = 'block';
        resultsSection.style.display = 'none';

        try {
            // Wait for the API secret to be loaded
            const apiSecret = await waitForSecret();
            
            if (!apiSecret) {
                throw new Error('API secret not available. Please login to get your API secret.');
            }

            const formData = new FormData();
            formData.append('image_file', currentFile);
            formData.append('fast_mode', fastModeCheckbox.checked);

            const startTime = Date.now();
            
            const response = await fetch('https://api.text-generator.io/api/v1/image-caption', {
                method: 'POST',
                headers: {
                    'secret': apiSecret
                },
                body: formData
            });

            const endTime = Date.now();
            const timeTaken = endTime - startTime;

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            
            // Show results
            captionResult.textContent = result.caption;
            processingTime.textContent = `${timeTaken}ms`;
            
            loadingSection.style.display = 'none';
            resultsSection.style.display = 'block';
            
        } catch (error) {
            console.error('Error:', error);
            alert('Error processing image: ' + error.message);
            loadingSection.style.display = 'none';
        }
    });

    // Copy caption
    copyBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(captionResult.textContent).then(() => {
            copyBtn.textContent = 'Copied!';
            setTimeout(() => {
                copyBtn.textContent = 'Copy Caption';
            }, 2000);
        });
    });

    // Process new image
    newImageBtn.addEventListener('click', () => {
        currentFile = null;
        previewSection.style.display = 'none';
        resultsSection.style.display = 'none';
        imageInput.value = '';
    });

    // Clear image
    clearBtn.addEventListener('click', () => {
        currentFile = null;
        previewSection.style.display = 'none';
        resultsSection.style.display = 'none';
        imageInput.value = '';
    });
});
</script>